html, body, #root, .app-container {
  height: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden; /* Prevent scrollbars */
}

:root {
  --grid-cell-size: 30px;
  --grid-gap: 20px;
  --module-size: calc(var(--grid-cell-size) * 5 + var(--grid-gap) * 4); /* Example: 5 cells wide */
}

.app-container {
  font-family: sans-serif;
  display: grid; /* Use grid for overall layout */
  grid-template-rows: auto 1fr auto; /* Header, main content, footer (if any) */
  grid-template-columns: 1fr; /* Single column for now, will adjust for modules */
  background-color: #f0f0f0;
  color: white;
  position: relative; /* For overlay positioning */
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

.main-content-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, var(--grid-cell-size)); /* Use auto-fill for flexible columns */
  grid-template-rows: repeat(auto-fill, var(--grid-cell-size)); /* Use auto-fill for flexible rows */
  gap: var(--grid-gap); /* Gap between grid cells */
  padding: var(--grid-gap);
  width: 100%;
  height: 100%;
  box-sizing: border-box; /* Include padding in width/height */
  align-items: start; /* Align items to the start of their grid area */
  justify-items: start; /* Align items to the start of their grid area */
  position: relative; /* For draggable modules */
}

/* Adjust DraggableModule styles for grid */
.react-draggable {
  position: relative !important; /* Override absolute positioning from DraggableModule.js */
  /* Modules will be positioned by react-draggable's grid prop */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  /* Initial size, will be adjusted by DraggableModule's minWidth/minHeight */
  width: var(--module-size); /* Example: 5 cells wide */
  height: var(--module-size); /* Example: 5 cells tall */
}

/* Specific module styling (adjust as needed based on image) */
/* These will be overridden by react-draggable's position, but can define initial size */
#clock-module {
  width: calc(var(--grid-cell-size) * 6 + var(--grid-gap) * 5); /* Example: 6 cells wide */
  height: calc(var(--grid-cell-size) * 4 + var(--grid-gap) * 3); /* Example: 4 cells tall */
}

#search-bar-module {
  width: calc(var(--grid-cell-size) * 8 + var(--grid-gap) * 7); /* Example: 8 cells wide */
  height: calc(var(--grid-cell-size) * 3 + var(--grid-gap) * 2); /* Example: 3 cells tall */
}

#quick-links-module {
  width: calc(var(--grid-cell-size) * 7 + var(--grid-gap) * 6); /* Example: 7 cells wide */
  height: calc(var(--grid-cell-size) * 10 + var(--grid-gap) * 9); /* Example: 10 cells tall */
}

#announcement-bar-module {
  width: calc(var(--grid-cell-size) * 7 + var(--grid-gap) * 6); /* Example: 7 cells wide */
  height: calc(var(--grid-cell-size) * 5 + var(--grid-gap) * 4); /* Example: 5 cells tall */
}

#enterprise-drive-module {
  width: calc(var(--grid-cell-size) * 7 + var(--grid-gap) * 6); /* Example: 7 cells wide */
  height: calc(var(--grid-cell-size) * 8 + var(--grid-gap) * 7); /* Example: 8 cells tall */
}

#other-module {
  width: calc(var(--grid-cell-size) * 5 + var(--grid-gap) * 4); /* Example: 5 cells wide */
  height: calc(var(--grid-cell-size) * 3 + var(--grid-gap) * 2); /* Example: 3 cells tall */
}